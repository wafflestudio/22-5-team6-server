Index: src/test/kotlin/com/example/toyTeam6Airbnb/RoomControllerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.toyTeam6Airbnb\r\n\r\nimport com.example.toyTeam6Airbnb.room.persistence.Address\r\nimport com.example.toyTeam6Airbnb.room.persistence.RoomRepository\r\nimport com.example.toyTeam6Airbnb.room.persistence.RoomType\r\nimport com.fasterxml.jackson.databind.JsonNode\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.BeforeEach\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.beans.factory.annotation.Autowired\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\r\nimport org.springframework.boot.test.context.SpringBootTest\r\nimport org.springframework.http.MediaType\r\nimport org.springframework.test.web.servlet.MockMvc\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders\r\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers\r\n\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass RoomControllerTest {\r\n\r\n    @Autowired\r\n    private lateinit var mockMvc: MockMvc\r\n\r\n    @Autowired\r\n    private lateinit var dataGenerator: DataGenerator\r\n\r\n    @Autowired\r\n    private lateinit var roomRepository: RoomRepository\r\n\r\n    @Test\r\n    fun `should create a new room`() {\r\n        val (user, token) = dataGenerator.generateUserAndToken()\r\n\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Sample Room\",\r\n            \"description\": \"A beautiful and cozy apartment located in the heart of Seoul. Perfect for travelers!\",\r\n            \"roomType\": \"APARTMENT\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Jongno-gu\",\r\n                \"street\": \"123 Hanok Street\",\r\n                \"detail\": \"Apartment 5B\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 10000,\r\n                \"charge\": 500,\r\n                \"total\": 0\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(requestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isCreated)\r\n            .andReturn()\r\n\r\n        val responseContent = result.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(responseContent)\r\n    }\r\n\r\n    @Test\r\n    fun `created room should be accessible`() {\r\n        val (user, token) = dataGenerator.generateUserAndToken()\r\n\r\n        // create a room with mockmvc\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Sample Room_2\",\r\n            \"description\": \"A nice place to stay\",\r\n            \"roomType\": \"VILLA\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Gangnam\",\r\n                \"street\": \"Gangnam Daero\",\r\n                \"detail\": \"34567\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 10000,\r\n                \"charge\": 500,\r\n                \"total\": 0\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val create_result = mockMvc.perform(\r\n            MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(requestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isCreated)\r\n            .andReturn()\r\n            .response\r\n\r\n        // extract room id from create_result's body\r\n        val responseBody = create_result.contentAsString\r\n        val roomId = responseBody.split(\"\\\"roomId\\\":\")[1].split(\",\")[0].toLong()\r\n\r\n        // room should be accessible without authentication\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/$roomId\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n\r\n        val responseContent = result.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(responseContent)\r\n    }\r\n\r\n    @Test\r\n    fun `should get 3 rooms from rooms main`() {\r\n        val room1 = dataGenerator.generateRoom()\r\n        val room2 = dataGenerator.generateRoom()\r\n        val room3 = dataGenerator.generateRoom()\r\n        val room4 = dataGenerator.generateRoom()\r\n        val room5 = dataGenerator.generateRoom()\r\n\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main?page=0&size=3\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n            .response\r\n            .contentAsString\r\n\r\n        // check result length\r\n        Assertions.assertEquals(getContentLength(result), 3)\r\n\r\n        // check if all rooms are in the result\r\n        Assertions.assertEquals(getNthContentId(result, 0), room1.id)\r\n        Assertions.assertEquals(getNthContentId(result, 1), room2.id)\r\n        Assertions.assertEquals(getNthContentId(result, 2), room3.id)\r\n\r\n        // Add assertions to verify the response content if needed\r\n        println(result)\r\n    }\r\n\r\n    fun getNthContentId(jsonString: String, n: Int): Long? {\r\n        val objectMapper = ObjectMapper()\r\n        val rootNode: JsonNode = objectMapper.readTree(jsonString)\r\n        val contentNode: JsonNode = rootNode.path(\"content\")\r\n        return if (contentNode.isArray && contentNode.size() > n) {\r\n            contentNode[n].path(\"roomId\").asLong()\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n\r\n    fun getContentLength(jsonString: String): Int {\r\n        val objectMapper = ObjectMapper()\r\n        val rootNode: JsonNode = objectMapper.readTree(jsonString)\r\n        val contentNode: JsonNode = rootNode.path(\"content\")\r\n        return if (contentNode.isArray) contentNode.size() else 0\r\n    }\r\n\r\n    @Test\r\n    fun `should be able to update room info, only for owner`() {\r\n        val (user, token) = dataGenerator.generateUserAndToken()\r\n        val (user2, token2) = dataGenerator.generateUserAndToken()\r\n\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Sample Room\",\r\n            \"description\": \"A beautiful and cozy apartment located in the heart of Seoul. Perfect for travelers!\",\r\n            \"roomType\": \"APARTMENT\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Jongno-gu\",\r\n                \"street\": \"123 Hanok Street\",\r\n                \"detail\": \"Apartment 5B\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 10000,\r\n                \"charge\": 500,\r\n                \"total\": 0\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(requestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isCreated)\r\n            .andReturn()\r\n\r\n        val responseContent = result.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(responseContent)\r\n\r\n        val roomId = responseContent.split(\"\\\"roomId\\\":\")[1].split(\",\")[0].toLong()\r\n\r\n        val updateRequestBody = \"\"\"\r\n            {\r\n            \"roomName\": \"Sample Room_2\",\r\n            \"description\": \"A nice place to stay\",\r\n            \"roomType\": \"VILLA\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Gangnam\",\r\n                \"street\": \"Gangnam Daero\",\r\n                \"detail\": \"34567\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 10000,\r\n                \"charge\": 500,\r\n                \"total\": 0\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val updateResult = mockMvc.perform(\r\n            MockMvcRequestBuilders.put(\"/api/v1/rooms/$roomId\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(updateRequestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n\r\n        val updateResponseContent = updateResult.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(updateResponseContent)\r\n\r\n        // verify 403 forbidden for user 2\r\n        val updateResult2 = mockMvc.perform(\r\n            MockMvcRequestBuilders.put(\"/api/v1/rooms/$roomId\")\r\n                .header(\"Authorization\", \"Bearer $token2\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(updateRequestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isForbidden)\r\n            .andReturn()\r\n    }\r\n\r\n    @Test\r\n    fun `should be able to delete room, only for owner`() {\r\n        val (user, token) = dataGenerator.generateUserAndToken()\r\n        val (user2, token2) = dataGenerator.generateUserAndToken()\r\n\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Sample Room\",\r\n            \"description\": \"A beautiful and cozy apartment located in the heart of Seoul. Perfect for travelers!\",\r\n            \"roomType\": \"APARTMENT\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Jongno-gu\",\r\n                \"street\": \"123 Hanok Street\",\r\n                \"detail\": \"Apartment 5B\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 10000,\r\n                \"charge\": 500,\r\n                \"total\": 0\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(requestBody)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isCreated)\r\n            .andReturn()\r\n\r\n        val responseContent = result.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(responseContent)\r\n\r\n        val roomId = responseContent.split(\"\\\"roomId\\\":\")[1].split(\",\")[0].toLong()\r\n\r\n        // verify 403 forbidden for user 2\r\n        val deleteResult2 = mockMvc.perform(\r\n            MockMvcRequestBuilders.delete(\"/api/v1/rooms/$roomId\")\r\n                .header(\"Authorization\", \"Bearer $token2\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isForbidden)\r\n            .andReturn()\r\n\r\n        val deleteResult = mockMvc.perform(\r\n            MockMvcRequestBuilders.delete(\"/api/v1/rooms/$roomId\")\r\n                .header(\"Authorization\", \"Bearer $token\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isNoContent)\r\n            .andReturn()\r\n\r\n        val deleteResponseContent = deleteResult.response.contentAsString\r\n        // Add assertions to verify the response content if needed\r\n        println(deleteResponseContent)\r\n\r\n        // verify 404 not found\r\n        val getAfterDelete = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/$roomId\")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isNotFound)\r\n            .andReturn()\r\n    }\r\n\r\n    @Test\r\n    fun `should search rooms by name`() {\r\n        val room1 = dataGenerator.generateRoom(name = \"Room1\")\r\n        val room2 = dataGenerator.generateRoom(name = \"Room2\")\r\n        val room3 = dataGenerator.generateRoom(name = \"Room3\")\r\n        val room4 = dataGenerator.generateRoom(name = \"Room4\")\r\n        val room5 = dataGenerator.generateRoom(name = \"Room5\")\r\n\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/search\")\r\n                .param(\"roomName\", \"Room1\")\r\n                .param(\"page\", \"0\")\r\n                .param(\"size\", \"10\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n            .response\r\n            .contentAsString\r\n\r\n        // check result length\r\n        Assertions.assertEquals(getContentLength(result), 1)\r\n\r\n        // check if all rooms are in the result\r\n        Assertions.assertEquals(getNthContentId(result, 0), room1.id)\r\n\r\n        // Add assertions to verify the response content if needed\r\n        println(result)\r\n    }\r\n\r\n    @Test\r\n    fun `should search rooms by address`() {\r\n        val address = Address(\"Seoul\", \"ad\", \"ad\", \"ad\")\r\n        val room1 = dataGenerator.generateRoom(name = \"Room1\")\r\n        val room2 = dataGenerator.generateRoom(name = \"Room2\")\r\n        val room3 = dataGenerator.generateRoom(name = \"Room3\", address = address)\r\n        val room4 = dataGenerator.generateRoom(name = \"Room4\")\r\n        val room5 = dataGenerator.generateRoom(name = \"Room5\")\r\n\r\n        val result = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/search\")\r\n                .param(\"sido\", \"Seoul\")\r\n                .param(\"page\", \"0\")\r\n                .param(\"size\", \"10\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n            .response\r\n            .contentAsString\r\n\r\n        // check result length\r\n        Assertions.assertEquals(getContentLength(result), 1)\r\n\r\n        // check if all rooms are in the result\r\n        Assertions.assertEquals(getNthContentId(result, 0), room3.id)\r\n\r\n        // Add assertions to verify the response content if needed\r\n        println(result)\r\n    }\r\n\r\n    @Test\r\n    fun `should search rooms by multiple conditions`() {\r\n        val address1 = Address(sido = \"sido1\", sigungu = \"sigungu1\", street = \"street1\", detail = \"detail1\")\r\n        val room1 = dataGenerator.generateRoom(name = \"Room1\", type = RoomType.APARTMENT, address = address1)\r\n\r\n        val address2 = Address(sido = \"sido1\", sigungu = \"sigungu1\", street = \"street2\", detail = \"detail2\")\r\n        val room2 = dataGenerator.generateRoom(name = \"Room2\", type = RoomType.VILLA, address = address2)\r\n\r\n        val address3 = Address(sido = \"sido1\", sigungu = \"sigungu1\", street = \"street2\", detail = \"detail3\")\r\n        val room3 = dataGenerator.generateRoom(name = \"Room3\", type = RoomType.HOTEL, address = address3)\r\n\r\n        val address4 = Address(sido = \"sido2\", sigungu = \"sigungu2\", street = \"street1\", detail = \"detail4\")\r\n        val room4 = dataGenerator.generateRoom(name = \"Room4\", type = RoomType.APARTMENT, address = address4)\r\n\r\n        val address5 = Address(sido = \"sido2\", sigungu = \"sigungu2\", street = \"street2\", detail = \"detail5\")\r\n        val room5 = dataGenerator.generateRoom(name = \"Room5\", type = RoomType.VILLA, address = address5)\r\n\r\n        val address6 = Address(sido = \"sido2\", sigungu = \"sigungu2\", street = \"street3\", detail = \"detail6\")\r\n        val room6 = dataGenerator.generateRoom(name = \"Room6\", type = RoomType.HOTEL, address = address6)\r\n\r\n        val address7 = Address(sido = \"sido3\", sigungu = \"sigungu3\", street = \"street1\", detail = \"detail7\")\r\n        val room7 = dataGenerator.generateRoom(name = \"Room7\", type = RoomType.APARTMENT, address = address7)\r\n\r\n        val address8 = Address(sido = \"sido3\", sigungu = \"sigungu3\", street = \"street2\", detail = \"detail8\")\r\n        val room8 = dataGenerator.generateRoom(name = \"Room8\", type = RoomType.VILLA, address = address8)\r\n\r\n        val address9 = Address(sido = \"sido3\", sigungu = \"sigungu3\", street = \"street3\", detail = \"detail9\")\r\n        val room9 = dataGenerator.generateRoom(name = \"Room9\", type = RoomType.HOTEL, address = address9)\r\n\r\n        val address10 = Address(sido = \"sido4\", sigungu = \"sigungu4\", street = \"street1\", detail = \"detail10\")\r\n        val room10 = dataGenerator.generateRoom(name = \"Room10\", type = RoomType.APARTMENT, address = address10)\r\n\r\n        val address11 = Address(sido = \"sido4\", sigungu = \"sigungu4\", street = \"street2\", detail = \"detail11\")\r\n        val room11 = dataGenerator.generateRoom(name = \"Room11\", type = RoomType.VILLA, address = address11)\r\n\r\n        val address12 = Address(sido = \"sido4\", sigungu = \"sigungu4\", street = \"street3\", detail = \"detail12\")\r\n        val room12 = dataGenerator.generateRoom(name = \"Room12\", type = RoomType.HOTEL, address = address12)\r\n\r\n        val result1 = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/search\")\r\n                .param(\"type\", RoomType.APARTMENT.name)\r\n                .param(\"sigungu\", \"sigungu1\")\r\n                .param(\"page\", \"0\")\r\n                .param(\"size\", \"10\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n            .response\r\n            .contentAsString\r\n\r\n        // check result length\r\n        Assertions.assertEquals(getContentLength(result1), 1)\r\n\r\n        // check if all rooms are in the result\r\n        Assertions.assertEquals(getNthContentId(result1, 0), room1.id)\r\n\r\n        // Add assertions to verify the response content if needed\r\n        println(result1)\r\n\r\n        val result2 = mockMvc.perform(\r\n            MockMvcRequestBuilders.get(\"/api/v1/rooms/main/search\")\r\n                .param(\"sigungu\", \"sigungu1\")\r\n                .param(\"street\", \"street2\")\r\n                .param(\"page\", \"0\")\r\n                .param(\"size\", \"10\")\r\n                .accept(MediaType.APPLICATION_JSON)\r\n        )\r\n            .andExpect(MockMvcResultMatchers.status().isOk)\r\n            .andReturn()\r\n            .response\r\n            .contentAsString\r\n\r\n        // check result length\r\n        Assertions.assertEquals(getContentLength(result2), 2)\r\n\r\n        // check if all rooms are in the result\r\n        Assertions.assertEquals(getNthContentId(result2, 0), room2.id)\r\n        Assertions.assertEquals(getNthContentId(result2, 1), room3.id)\r\n\r\n        // Add assertions to verify the response content if needed\r\n        println(result2)\r\n    }\r\n\r\n    @BeforeEach\r\n    fun setUp() {\r\n        dataGenerator.clearAll()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/com/example/toyTeam6Airbnb/RoomControllerTest.kt b/src/test/kotlin/com/example/toyTeam6Airbnb/RoomControllerTest.kt
--- a/src/test/kotlin/com/example/toyTeam6Airbnb/RoomControllerTest.kt	(revision 1b421de2d21ad330273306205c03eb061ff35a9a)
+++ b/src/test/kotlin/com/example/toyTeam6Airbnb/RoomControllerTest.kt	(date 1737050949670)
@@ -124,7 +124,7 @@
 
         // extract room id from create_result's body
         val responseBody = create_result.contentAsString
-        val roomId = responseBody.split("\"roomId\":")[1].split(",")[0].toLong()
+        val roomId = responseBody.split("\"roomId\":")[1].split(",")[0].replace("}", "").toLong()
 
         // room should be accessible without authentication
         val result = mockMvc.perform(
@@ -337,7 +337,7 @@
         // Add assertions to verify the response content if needed
         println(responseContent)
 
-        val roomId = responseContent.split("\"roomId\":")[1].split(",")[0].toLong()
+        val roomId = responseContent.split("\"roomId\":")[1].split(",")[0].replace("}", "").toLong()
 
         // verify 403 forbidden for user 2
         val deleteResult2 = mockMvc.perform(
@@ -470,7 +470,7 @@
 
         val result1 = mockMvc.perform(
             MockMvcRequestBuilders.get("/api/v1/rooms/main/search")
-                .param("type", RoomType.APARTMENT.name)
+                .param("roomType", RoomType.APARTMENT.name)
                 .param("sigungu", "sigungu1")
                 .param("page", "0")
                 .param("size", "10")
Index: src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  datasource:\r\n    url: 'jdbc:mysql://127.0.0.1:3306/testdb'\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    username: user\r\n    password: somepassword\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: create-drop\r\n    properties:\r\n      hibernate:\r\n        show_sql: true\r\n        format_sql: true\r\n  profiles:\r\n    active: dev\r\n\r\n  security:\r\n    jwt-secret: AAAAAAAAAAAAAAAAAAAAAAAAADSFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          google:\r\n            client-id: ASDF\r\n            client-secret: ASDF\r\n            redirect-uri: '{baseUrl}/api/oauth2/callback/{registrationId}'\r\n            scope:\r\n              - email\r\n              - profile\r\n          naver:\r\n            client-id: ASDF\r\n            client-secret: ASDF\r\n            client-name: naver\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: '{baseUrl}/api/oauth2/callback/{registrationId}'\r\n          kakao:\r\n            client-id: ASDF\r\n            client-secret: ASDF\r\n            client-authentication-method: client_secret_post\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: '{baseUrl}/api/oauth2/callback/{registrationId}'\r\n            client-name: kakao\r\n        provider:\r\n          naver:\r\n            authorization-uri: https://nid.naver.com/oauth2.0/authorize\r\n            token-uri: https://nid.naver.com/oauth2.0/token\r\n            user-info-uri: https://openapi.naver.com/v1/nid/me\r\n            user-name-attribute: response\r\n          kakao:\r\n            authorization-uri: https://kauth.kakao.com/oauth/authorize\r\n            token-uri: https://kauth.kakao.com/oauth/token\r\n            user-info-uri: https://kapi.kakao.com/v2/user/me\r\n            user-name-attribute: id\r\n\r\n\r\n#cache: # Use if we implement Caffeine caching\r\n#  expire-after-write: 1m\r\n#  maximum-size: 100\r\n\r\n\r\nspringdoc:\r\n  api-docs:\r\n    path: /api-docs\r\n  swagger-ui:\r\n    path: /swagger-ui\r\n    oauth2RedirectUrl: '/api/oauth2/callback/google'\r\n    oauth:\r\n      use-pkce-with-authorization-code-grant: true\r\n  show-login-endpoint: true\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yaml b/src/main/resources/application.yaml
--- a/src/main/resources/application.yaml	(revision 1b421de2d21ad330273306205c03eb061ff35a9a)
+++ b/src/main/resources/application.yaml	(date 1737050446134)
@@ -66,3 +66,35 @@
     oauth:
       use-pkce-with-authorization-code-grant: true
   show-login-endpoint: true
+
+
+cloudfront:
+  private-key: |
+    -----BEGIN RSA PRIVATE KEY-----
+    MIIEowIBAAKCAQEA9t/ZCGUmb6V+6SSXTMW+Ctm4jQTnjBlHGtTbV6Lmh9kpwTeE
+    z92wJXNtU+SS+RHyKS5NSbZiAjUm0SCNrw/MFyqsfZrtegaLAiBCbGoiW2O4/+ki
+    qMRW76e5Xna1miadzP+TcE+F19kKy507+KWVQKxgS9ny556qfYaQ0i6EaycxEE+h
+    CeZaw2FcXdb/mLuDTafIFTphcvuImk48Cm93pwdoKGEAv4ZtuttlX0/30/BAUCfi
+    C37bQHuaTLEhJX1FIqJDnfhkpaIgrjqFlqERXwwdjL7PxsuIRVTjIteVF4dc2m2q
+    5VKo7tSZwlU/URu4+o/W7kdadWAO1tLJbN8pDwIDAQABAoIBAAhz+bZz4DEKdaH+
+    AsA6NRuiANOzS0pcwzaD+06w4Tvdj7Rx9jY33QQrQ58PwIiOuL/4OeVAPXLd5wpa
+    Fv/bhp10dJuIZoE7IB9eg2e66po+e+MnVGx67I8gKxS089rnX5fZWG8MCgUuBVSb
+    eaY15TplrJZsTAjqQeQya1sHBLm2eJxRuEOy7DiWAfBTvegkrg/xzA5rjaC2tQYT
+    gjKSWFu/2qKQos2UqAmoVelIdH6XFVLPKQGqViaNw5vpeENQ6ptxZBHyN8r69qJs
+    J0G0J8aoSS4924fiFAmxilFoX0AsgBLjBXSZMSiLGdmaCc4t/3pA69NVzmD1qSbm
+    W4cnUeECgYEA+5RFjxYWfG70+c/NoeSg3UFJIaG1iXnI0Jgr2K102Uxy2ynzEny0
+    FoFJuGZB4Z7tDqFGD2Qy4eI/J116WMJ8pUilJoBGsfjjvHwZn1kp9Ob/swmHgtDp
+    6Zgv56PLMhVNg3aRZgDM6XILkn5NyIzoeEqHdcC8PALgEWCgINyDO8sCgYEA+zZp
+    YEdpqP7V9w0pDdv3Qn9hY1ij3lThwCIEPUArHISJyH8yc7ZVlBvdea3ygRjEr969
+    y0IRIPeScr5DijyJTavmWlbuMPDg41psdVCyuKsmcftXCpgmiMxzeDGfP88lSUKm
+    1vYEaCF9dhLCK3KKOOa/IUNC0tZuaKKEhUEW500CgYAXmb08wxGw8qfAl6Huwgfl
+    Oa6mnQjusKIKD3xtgzgm+mj77l+DKHesdMx5o/4iMEqEyNRNtVSgpBzQkJBdq0EO
+    MFZt2jLHl1Wl5O5yaGbrNpBeN1KjDv4ij8hOrqrtM9plrsXND94pOC2lvHuHiNB2
+    GGfEwCPobUyf1LSw4H7fKQKBgHRezUu7aRfPDSEHqKfx6MWWKnASBL8ehQEzANG6
+    4v2v6//D5IQzx8r3aY5PZRImfh6WSUdaEIM8DEw5FSJ5ToV7hxb8RBTJ0POg1LM3
+    scLYDdQpQTX4K4mdZDQekI3HkJcyWAUmK/5s3SiQIgBsa9lWEt3+wXrXuIeiGU99
+    SnXVAoGBAIW+Tdd1LTAGOayI+tAZyCbeAescJFpHtWGbSNFb2mzLMpLwoqcCPqcK
+    9V5CtyKXrRse7V4gQ8ZnZINPIX6NKOS5vF0xRz8GauIKMl+fhb7r/rGJ6XkVNVcn
+    JKwSrdq4xQaO4cUw+kIxrvJLcU/frtP61VmjIfeOa5Us5AJnJrJ8
+    -----END RSA PRIVATE KEY-----
+  key-pair-id: APKA6JQ44TDZUW3KOEGZ
Index: src/test/kotlin/com/example/toyTeam6Airbnb/RoomConcurrencyTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.toyTeam6Airbnb\r\n\r\nimport com.example.toyTeam6Airbnb.room.persistence.RoomRepository\r\nimport org.junit.jupiter.api.Assertions.assertEquals\r\nimport org.junit.jupiter.api.BeforeEach\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.beans.factory.annotation.Autowired\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\r\nimport org.springframework.boot.test.context.SpringBootTest\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.http.MediaType\r\nimport org.springframework.test.web.servlet.MockMvc\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders\r\nimport org.springframework.test.web.servlet.result.MockMvcResultHandlers\r\nimport java.util.concurrent.CountDownLatch\r\nimport java.util.concurrent.Executors\r\n\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass RoomConcurrencyTest {\r\n\r\n    @Autowired\r\n    private lateinit var mockMvc: MockMvc\r\n\r\n    @Autowired\r\n    private lateinit var roomRepository: RoomRepository\r\n\r\n    @Autowired\r\n    private lateinit var dataGenerator: DataGenerator\r\n\r\n    @BeforeEach\r\n    fun setUp() {\r\n        dataGenerator.clearAll()\r\n    }\r\n\r\n    @Test\r\n    fun `should throw DuplicateRoomException when two identical requests are made concurrently`() {\r\n        val (user, token) = dataGenerator.generateUserAndToken()\r\n\r\n        val latch = CountDownLatch(2)\r\n        val executor = Executors.newFixedThreadPool(2)\r\n\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Cozy Apartment in Seoul\",\r\n            \"description\": \"A beautiful and cozy apartment located in the heart of Seoul. Perfect for travelers!\",\r\n            \"roomType\": \"APARTMENT\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Jongno-gu\",\r\n                \"street\": \"123 Hanok Street\",\r\n                \"detail\": \"Apartment 5B\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 5000,\r\n                \"cleaningFee\": 5000,\r\n                \"charge\": 5000\r\n            },\r\n            \"maxOccupancy\": 1\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val results = mutableListOf<Int>()\r\n\r\n        executor.submit {\r\n            try {\r\n                val result = mockMvc.perform(\r\n                    MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(requestBody)\r\n                        .header(\"Authorization\", \"Bearer $token\")\r\n                )\r\n                    .andDo(MockMvcResultHandlers.print())\r\n                    .andReturn()\r\n                results.add(result.response.status)\r\n            } finally {\r\n                latch.countDown()\r\n            }\r\n        }\r\n\r\n        executor.submit {\r\n            try {\r\n                val result = mockMvc.perform(\r\n                    MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(requestBody)\r\n                        .header(\"Authorization\", \"Bearer $token\")\r\n                )\r\n                    .andDo(MockMvcResultHandlers.print())\r\n                    .andReturn()\r\n                results.add(result.response.status)\r\n            } finally {\r\n                latch.countDown()\r\n            }\r\n        }\r\n\r\n        latch.await()\r\n\r\n        assertEquals(1, results.count { it == HttpStatus.CREATED.value() })\r\n        assertEquals(1, results.count { it == HttpStatus.CONFLICT.value() })\r\n\r\n        val rooms = roomRepository.findAll()\r\n        assertEquals(1, rooms.size)\r\n    }\r\n\r\n    @Test\r\n    fun `should throw DuplicateRoomException when identical requests are made by different users concurrently`() {\r\n        val (user1, token1) = dataGenerator.generateUserAndToken()\r\n        val (user2, token2) = dataGenerator.generateUserAndToken()\r\n\r\n        val latch = CountDownLatch(2)\r\n        val executor = Executors.newFixedThreadPool(2)\r\n\r\n        val requestBody = \"\"\"\r\n        {\r\n            \"roomName\": \"Cozy Apartment in Seoul\",\r\n            \"description\": \"A beautiful and cozy apartment located in the heart of Seoul. Perfect for travelers!\",\r\n            \"roomType\": \"APARTMENT\",\r\n            \"address\": {\r\n                \"sido\": \"Seoul\",\r\n                \"sigungu\": \"Jongno-gu\",\r\n                \"street\": \"123 Hanok Street\",\r\n                \"detail\": \"Apartment 5B\"\r\n            },\r\n            \"roomDetails\": {\r\n                \"wifi\": true,\r\n                \"selfCheckin\": false,\r\n                \"luggage\": false,\r\n                \"tv\": true,\r\n                \"bedroom\": 1,\r\n                \"bathroom\": 1,\r\n                \"bed\": 1\r\n            },\r\n            \"price\": {\r\n                \"perNight\": 50000,\r\n                \"cleaningFee\": 20000,\r\n                \"charge\": 5000\r\n            },\r\n            \"maxOccupancy\": 4\r\n        }\r\n        \"\"\".trimIndent()\r\n\r\n        val results = mutableListOf<Int>()\r\n\r\n        executor.submit {\r\n            try {\r\n                val result = mockMvc.perform(\r\n                    MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(requestBody)\r\n                        .header(\"Authorization\", \"Bearer $token1\")\r\n                )\r\n                    .andDo(MockMvcResultHandlers.print())\r\n                    .andReturn()\r\n                results.add(result.response.status)\r\n            } finally {\r\n                latch.countDown()\r\n            }\r\n        }\r\n\r\n        executor.submit {\r\n            try {\r\n                val result = mockMvc.perform(\r\n                    MockMvcRequestBuilders.post(\"/api/v1/rooms\")\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(requestBody)\r\n                        .header(\"Authorization\", \"Bearer $token2\")\r\n                )\r\n                    .andDo(MockMvcResultHandlers.print())\r\n                    .andReturn()\r\n                results.add(result.response.status)\r\n            } finally {\r\n                latch.countDown()\r\n            }\r\n        }\r\n\r\n        latch.await()\r\n\r\n        assertEquals(1, results.count { it == HttpStatus.CREATED.value() })\r\n        assertEquals(1, results.count { it == HttpStatus.CONFLICT.value() })\r\n\r\n        val rooms = roomRepository.findAll()\r\n        assertEquals(1, rooms.size)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/com/example/toyTeam6Airbnb/RoomConcurrencyTest.kt b/src/test/kotlin/com/example/toyTeam6Airbnb/RoomConcurrencyTest.kt
--- a/src/test/kotlin/com/example/toyTeam6Airbnb/RoomConcurrencyTest.kt	(revision 1b421de2d21ad330273306205c03eb061ff35a9a)
+++ b/src/test/kotlin/com/example/toyTeam6Airbnb/RoomConcurrencyTest.kt	(date 1737050949681)
@@ -186,7 +186,7 @@
         latch.await()
 
         assertEquals(1, results.count { it == HttpStatus.CREATED.value() })
-        assertEquals(1, results.count { it == HttpStatus.CONFLICT.value() })
+        assertEquals(1, results.count { it == HttpStatus.BAD_REQUEST.value() })
 
         val rooms = roomRepository.findAll()
         assertEquals(1, rooms.size)
